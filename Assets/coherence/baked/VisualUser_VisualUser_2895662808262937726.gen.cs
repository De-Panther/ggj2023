// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct VisualUser_VisualUser_2895662808262937726 : ICoherenceComponentData
	{
		public bool controllerLeftEnable;
		public bool controllerRightEnable;
		public Vector3 controllerLeftPosition;
		public Quaternion controllerLeftRotation;
		public Vector3 controllerRightPosition;
		public Quaternion controllerRightRotation;

		public override string ToString()
		{
			return $"VisualUser_VisualUser_2895662808262937726(controllerLeftEnable: {controllerLeftEnable}, controllerRightEnable: {controllerRightEnable}, controllerLeftPosition: {controllerLeftPosition}, controllerLeftRotation: {controllerLeftRotation}, controllerRightPosition: {controllerRightPosition}, controllerRightRotation: {controllerRightRotation})";
		}

		public uint GetComponentType() => Definition.InternalVisualUser_VisualUser_2895662808262937726;

		public const int order = 0;

		public int GetComponentOrder() => order;

		public AbsoluteSimulationFrame Frame;
	

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (VisualUser_VisualUser_2895662808262937726)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				controllerLeftEnable = other.controllerLeftEnable;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				controllerRightEnable = other.controllerRightEnable;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				controllerLeftPosition = other.controllerLeftPosition;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				controllerLeftRotation = other.controllerLeftRotation;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				controllerRightPosition = other.controllerRightPosition;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				controllerRightRotation = other.controllerRightRotation;
			}
			mask >>= 1;
			return this;
		}

		public static void Serialize(VisualUser_VisualUser_2895662808262937726 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.controllerLeftEnable);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.controllerRightEnable);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteVector3((data.controllerLeftPosition.ToCoreVector3()), FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteQuaternion((data.controllerLeftRotation.ToCoreQuaternion()), 32);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteVector3((data.controllerRightPosition.ToCoreVector3()), FloatMeta.NoCompression());
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteQuaternion((data.controllerRightRotation.ToCoreQuaternion()), 32);
			}
			mask >>= 1;
		}

		public static (VisualUser_VisualUser_2895662808262937726, uint, uint?) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new VisualUser_VisualUser_2895662808262937726();
	
			if (bitStream.ReadMask())
			{
				val.controllerLeftEnable = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.controllerRightEnable = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.controllerLeftPosition = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.controllerLeftRotation = (bitStream.ReadQuaternion(32)).ToUnityQuaternion();
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.controllerRightPosition = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000010000;
			}
			if (bitStream.ReadMask())
			{
				val.controllerRightRotation = (bitStream.ReadQuaternion(32)).ToUnityQuaternion();
				mask |= 0b00000000000000000000000000100000;
			}
			return (val, mask, null);
		}
		public static (VisualUser_VisualUser_2895662808262937726, uint, uint?) DeserializeArchetypeVisualUser_3d8e0d6bf6d1f18448fd5924dc4297a2_VisualUser_VisualUser_2895662808262937726_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new VisualUser_VisualUser_2895662808262937726();
			if (bitStream.ReadMask())
			{
				val.controllerLeftEnable = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.controllerRightEnable = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.controllerLeftPosition = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.controllerLeftRotation = (bitStream.ReadQuaternion(32)).ToUnityQuaternion();
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.controllerRightPosition = (bitStream.ReadVector3(FloatMeta.NoCompression())).ToUnityVector3();
				mask |= 0b00000000000000000000000000010000;
			}
			if (bitStream.ReadMask())
			{
				val.controllerRightRotation = (bitStream.ReadQuaternion(32)).ToUnityQuaternion();
				mask |= 0b00000000000000000000000000100000;
			}

			return (val, mask, 0);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as VisualUser_VisualUser_2895662808262937726?;
	
		}
	}
}